from sqlalchemy.orm import relationship
from sqlalchemy.sql.schema import Column, ForeignKey
from sqlalchemy.sql.sqltypes import BigInteger, Enum, Float, String

from reia.datamodel.base import ORMBase
from reia.datamodel.lossvalues import ELossCategory
from reia.datamodel.mixins import (ClassificationMixin, CompatibleFloatArray,
                                   CreationInfoMixin, PublicIdMixin)


class VulnerabilityModel(ORMBase, PublicIdMixin, CreationInfoMixin):
    """
    Vulnerability model

    Instance of SQLAlchemy Single Table Inheritance
    """

    name = Column(String)
    description = Column(String)
    assetcategory = Column(String)

    vulnerabilityfunctions = relationship(
        'VulnerabilityFunction',
        back_populates='vulnerabilitymodel',
        cascade='all, delete-orphan',
        passive_deletes=True,
        lazy='joined')

    _type = Column(Enum(ELossCategory))

    __mapper_args__ = {
        "polymorphic_on": _type,
        "polymorphic_identity": ELossCategory.NULL,
    }


class OccupantsVulnerabilityModel(VulnerabilityModel):
    __tablename__ = None
    __mapper_args__ = {
        "polymorphic_identity": ELossCategory.OCCUPANTS,
    }


class ContentsVulnerabilityModel(VulnerabilityModel):
    __tablename__ = None
    __mapper_args__ = {
        "polymorphic_identity": ELossCategory.CONTENTS,
    }


class StructuralVulnerabilityModel(VulnerabilityModel):
    __tablename__ = None
    __mapper_args__ = {
        "polymorphic_identity": ELossCategory.STRUCTURAL,
    }


class NonstructuralVulnerabilityModel(VulnerabilityModel):
    __tablename__ = None
    __mapper_args__ = {
        "polymorphic_identity": ELossCategory.NONSTRUCTURAL,
    }


class BusinessInterruptionVulnerabilityModel(VulnerabilityModel):
    __tablename__ = None
    __mapper_args__ = {
        "polymorphic_identity": ELossCategory.BUSINESS_INTERRUPTION,
    }


class VulnerabilityFunction(ClassificationMixin('taxonomy'), ORMBase):
    """Vulnerability Function Model"""

    _vulnerabilitymodel_oid = Column(
        BigInteger,
        ForeignKey('loss_vulnerabilitymodel._oid', ondelete='CASCADE'))
    vulnerabilitymodel = relationship(
        'VulnerabilityModel',
        back_populates='vulnerabilityfunctions')

    distribution = Column(String, nullable=False)
    intensitymeasuretype = Column(String, nullable=False)

    lossratios = relationship('LossRatio',
                              back_populates='vulnerabilityfunction',
                              passive_deletes=True,
                              cascade='all, delete-orphan',
                              lazy='joined')


class LossRatio(ORMBase):
    intensitymeasurelevel = Column(Float)
    mean = Column(Float)
    coefficientofvariation = Column(Float)
    pmf_variable = Column(CompatibleFloatArray)
    pmf_probability = Column(CompatibleFloatArray)

    _vulnerabilityfunction_oid = Column(BigInteger, ForeignKey(
        'loss_vulnerabilityfunction._oid', ondelete='CASCADE'))
    vulnerabilityfunction = relationship('VulnerabilityFunction',
                                         back_populates='lossratios')
