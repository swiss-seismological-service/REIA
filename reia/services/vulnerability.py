import io
from pathlib import Path

from reia.io.read import parse_vulnerability
from reia.io.write import create_vulnerability_buffer
from reia.repositories.types import SessionType
from reia.repositories.vulnerability import VulnerabilityModelRepository
from reia.schemas.vulnerability_schemas import VulnerabilityModel
from reia.services import DataService


class VulnerabilityService(DataService):
    @classmethod
    def import_from_file(
            cls,
            session: SessionType,
            file_path: Path,
            name: str) -> VulnerabilityModel:
        """Load vulnerability model from file into data storage layer.

        Args:
            session: Database session.
            file_path: Path to the vulnerability file.
            name: Name for the vulnerability model.

        Returns:
            Created VulnerabilityModel.
        """
        with open(file_path, 'r') as f:
            model = parse_vulnerability(f)
        model.name = name

        vulnerability_model = VulnerabilityModelRepository.create(
            session, model)
        return vulnerability_model

    @classmethod
    def export_to_file(
            cls,
            session: SessionType,
            oid: int,
            file_path: str) -> str:
        """Export vulnerability model from data storage layer to disk file.

        Args:
            session: Database session.
            oid: ID of the vulnerability model.
            file_path: Path where to save the file.

        Returns:
            The filename of the created file.
        """
        output_path = Path(file_path).with_suffix('.xml')

        file_pointer = cls.export_to_buffer(session, oid)

        output_path.parent.mkdir(exist_ok=True)
        output_path.open('w').write(file_pointer.getvalue())

        return str(output_path)

    @classmethod
    def export_to_buffer(
            cls, session: SessionType, oid: int) -> io.StringIO:
        """Generate vulnerability model from data storage layer to memory file.

        Args:
            session: Database session.
            oid: ID of the VulnerabilityModel to be used.

        Returns:
            In-memory file object for vulnerability XML.
        """
        vulnerability_model = VulnerabilityModelRepository.get_by_id(
            session, oid)
        template_name = Path('reia/templates/vulnerability.xml')
        return create_vulnerability_buffer(vulnerability_model, template_name)
