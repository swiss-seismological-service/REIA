import io
from pathlib import Path

from reia.io.read import parse_vulnerability
from reia.io.write import create_vulnerability_buffer
from reia.repositories.types import SessionType
from reia.repositories.vulnerability import VulnerabilityModelRepository
from reia.schemas.vulnerability_schemas import VulnerabilityModel


def add_vulnerability_from_file(
        session: SessionType,
        file_path: Path,
        name: str) -> VulnerabilityModel:
    """Load vulnerability model from file into data storage layer.

    Args:
        session: Database session.
        file_path: Path to the vulnerability file.
        name: Name for the vulnerability model.

    Returns:
        Created VulnerabilityModel.
    """
    with open(file_path, 'r') as f:
        model = parse_vulnerability(f)
    model.name = name

    vulnerability_model = VulnerabilityModelRepository.create(session, model)
    return vulnerability_model


def create_vulnerability_file(
        session: SessionType,
        vulnerability_oid: int,
        output_path: Path) -> bool:
    """Export vulnerability model from data storage layer to disk file.

    Args:
        session: Database session.
        vulnerability_oid: ID of the vulnerability model.
        output_path: Path where to save the file.

    Returns:
        True if file was created successfully.
    """
    output_path = output_path.with_suffix('.xml')

    file_pointer = create_vulnerability_input(session, vulnerability_oid)

    output_path.parent.mkdir(exist_ok=True)
    output_path.open('w').write(file_pointer.getvalue())

    return output_path.exists()


def create_vulnerability_input(
        session: SessionType,
        vulnerability_model_oid: int,
        template_name: Path = Path('reia/templates/vulnerability.xml')
) -> io.StringIO:
    """Generate vulnerability model from data storage layer to in-memory file.

    Args:
        session: Database session.
        vulnerability_model_oid: ID of the VulnerabilityModel to be used.
        template_name: Template to be used for the vulnerability file.

    Returns:
        In-memory file object for vulnerability XML.
    """
    vulnerability_model = VulnerabilityModelRepository.get_by_id(
        session, vulnerability_model_oid)

    return create_vulnerability_buffer(vulnerability_model, template_name)
