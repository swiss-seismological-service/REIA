from sqlalchemy.orm import Session

from reia.datamodel.vulnerability import \
    BusinessInterruptionVulnerabilityModel as \
    BusinessInterruptionVulnerabilityModelORM
from reia.datamodel.vulnerability import \
    ContentsVulnerabilityModel as ContentsVulnerabilityModelORM
from reia.datamodel.vulnerability import LossRatio as LossRatioORM
from reia.datamodel.vulnerability import \
    NonstructuralVulnerabilityModel as NonstructuralVulnerabilityModelORM
from reia.datamodel.vulnerability import \
    OccupantsVulnerabilityModel as OccupantsVulnerabilityModelORM
from reia.datamodel.vulnerability import \
    StructuralVulnerabilityModel as StructuralVulnerabilityModelORM
from reia.datamodel.vulnerability import \
    VulnerabilityFunction as VulnerabilityFunctionORM
from reia.datamodel.vulnerability import \
    VulnerabilityModel as VulnerabilityModelORM
from reia.repositories.base import repository_factory
from reia.schemas.vulnerability_schemas import (
    BusinessInterruptionVulnerabilityModel, ContentsVulnerabilityModel,
    LossRatio, NonstructuralVulnerabilityModel, OccupantsVulnerabilityModel,
    StructuralVulnerabilityModel, VulnerabilityFunction, VulnerabilityModel)


class VulnerabilityModelRepository(repository_factory(
        VulnerabilityModel, VulnerabilityModelORM)):
    @classmethod
    def create(cls,
               session: Session,
               data: VulnerabilityModel) -> VulnerabilityModel:
        """Create a new vulnerability model."""

        vulnerability_functions = []
        for vf in data.vulnerabilityfunctions:
            loss_ratios = [LossRatioORM(**lr.model_dump())
                           for lr in vf.lossratios]
            vulnerability_function = VulnerabilityFunctionORM(
                **vf.model_dump(exclude={'lossratios'}))
            vulnerability_function.lossratios = loss_ratios
            vulnerability_functions.append(vulnerability_function)

        db_model = VulnerabilityModelORM(
            **data.model_dump(exclude={'vulnerabilityfunctions'}))
        db_model.vulnerabilityfunctions = vulnerability_functions

        session.add(db_model)
        session.commit()
        session.refresh(db_model)
        return VulnerabilityModel.model_validate(db_model)


class OccupantsVulnerabilityModelRepository(repository_factory(
        OccupantsVulnerabilityModel, OccupantsVulnerabilityModelORM)):
    pass


class ContentsVulnerabilityModelRepository(repository_factory(
        ContentsVulnerabilityModel, ContentsVulnerabilityModelORM)):
    pass


class StructuralVulnerabilityModelRepository(repository_factory(
        StructuralVulnerabilityModel, StructuralVulnerabilityModelORM)):
    pass


class NonstructuralVulnerabilityModelRepository(repository_factory(
        NonstructuralVulnerabilityModel, NonstructuralVulnerabilityModelORM)):
    pass


class BusinessInterruptionVulnerabilityModelRepository(
    repository_factory(
        BusinessInterruptionVulnerabilityModel,
        BusinessInterruptionVulnerabilityModelORM)):
    pass


class VulnerabilityFunctionRepository(repository_factory(
        VulnerabilityFunction, VulnerabilityFunctionORM)):
    pass


class LossRatioRepository(repository_factory(
        LossRatio, LossRatioORM)):
    pass
